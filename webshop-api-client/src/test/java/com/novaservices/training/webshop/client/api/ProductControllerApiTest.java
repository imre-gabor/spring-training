/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.novaservices.training.webshop.client.api;

import com.novaservices.training.webshop.client.model.PageProduct;
import com.novaservices.training.webshop.client.model.Product;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductControllerApi
 */
@Ignore
public class ProductControllerApiTest {

    private final ProductControllerApi api = new ProductControllerApi();

    
    /**
     * create
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUsingPOSTTest() {
        Product product = null;
        Product response = api.createUsingPOST(product);

        // TODO: test validations
    }
    
    /**
     * delete
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUsingDELETETest() {
        Long id = null;
        api.deleteUsingDELETE(id);

        // TODO: test validations
    }
    
    /**
     * getAll
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllUsingGETTest() {
        List<Product> response = api.getAllUsingGET();

        // TODO: test validations
    }
    
    /**
     * getById
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getByIdUsingGETTest() {
        Long id = null;
        Product response = api.getByIdUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * modify
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyUsingPUTTest() {
        Product product = null;
        Product response = api.modifyUsingPUT(product);

        // TODO: test validations
    }
    
    /**
     * search1
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void search1UsingPOSTTest() {
        Product example = null;
        List<Product> response = api.search1UsingPOST(example);

        // TODO: test validations
    }
    
    /**
     * search2
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void search2UsingPOSTTest() {
        Product example = null;
        Long offset = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        Boolean paged = null;
        Boolean sortSorted = null;
        Boolean sortUnsorted = null;
        Boolean unpaged = null;
        PageProduct response = api.search2UsingPOST(example, offset, pageNumber, pageSize, paged, sortSorted, sortUnsorted, unpaged);

        // TODO: test validations
    }
    
    /**
     * search3
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void search3UsingPOSTTest() {
        Product example = null;
        Object page = null;
        Object size = null;
        List<String> sort = null;
        PageProduct response = api.search3UsingPOST(example, page, size, sort);

        // TODO: test validations
    }
    
}
